name: "Java Build and Vulnerability Scan"

on:
  workflow_call: # Makes this a reusable workflow
    inputs:
      java-version:
        description: "The Java version to set up"
        required: true
        default: "17"
        type: string
      scan-type:
        description: "The type of vulnerability scan to run"
        required: false
        default: "fs"
        type: string
      docker-registry:
        description: "Docker registry for pushing images"
        required: true
        type: string
        default: "ghcr.io"
      image-name:
        description: "The docker image name"
        required: true
        type: string
        default: ${{ github.repository }}
      docker-tags:
        description: "Tags for the Docker image"
        required: true
        type: string
    secrets:
      MY_PAT:
        description: "Personal access token for Docker registry login"
        required: false

#TODO: remove the code checkout for each job once we start using self hosted runners
jobs:
  build-code:
    name: Build Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        if: ${{ inputs.java-version == '17' }}
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set up JDK 21
        if: ${{ inputs.java-version == '21' }}
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Build with Maven
        run: mvn compile
        shell: bash

  scan:
    name: Trivy scan
    needs: build-code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Test for Vulnerabilities
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: ${{ inputs.scan-type }}

  build-scan-push-image:
    name: Build and push docker image
    needs: scan
    runs-on: ubuntu-latest
    steps:
      - name: Use Composite Action
        uses: itaydj/managed-pipeline/.github/actions/build-scan-push/action.yml@main
        with:
          registry: ${{ inputs.docker-registry }}
          docker-username: ${{ github.actor }}
          docker-password: ${{ secrets.GITHUB_TOKEN }}
          image-name: ${{ github.repository }}/${{ input.image_name }}
          image-tag: latest
